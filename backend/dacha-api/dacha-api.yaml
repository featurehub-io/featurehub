openapi: 3.0.1
info:
  title: Cache (Dache) API
  description: This is used by the Edge servers to access features and environments quickly.
  version: "1.1.1"
paths:
  /v2/environment/{eId}/{serviceAccountKey}:
    parameters:
      - name: eId
        description: "id of environment"
        in: path
        schema:
          type: string
          format: uuid
      - name: serviceAccountKey
        description: "serviceAccountKey of service account"
        in: path
        schema:
          type: string
    get:
      operationId: getApiKeyDetails
      tags:
        - DachaApiKeyService
      responses:
        200:
          description: "All feature values for this environment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DachaKeyDetailsResponse"
        404:
          description: "No such environment/account combo has read access"
  /v2/environment/{eId}/{serviceAccountKey}/permissions/{featureKey}:
    parameters:
      - name: eId
        description: "id of environment"
        in: path
        schema:
          type: string
          format: uuid
      - name: serviceAccountKey
        description: "id of service account"
        in: path
        schema:
          type: string
      - name: featureKey
        in: path
        description: "The key that we want"
        schema:
          type: string
    get:
      operationId: getApiKeyPermissions
      tags:
        - DachaApiKeyService
      responses:
        200:
          description: "All permissions and feature values for this environment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DachaPermissionResponse"
        404:
          description: "No such environment/account combo has read access"
  /v2/environment/{eId}/structure:
    parameters:
      - name: eId
        description: "id of environment"
        in: path
        schema:
          type: string
          format: uuid
    get:
      operationId: getEnvironmentStructure
      tags:
        - DachaEnvironmentService
      responses:
        200:
          description: "The parent structure for this environment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DachaStructureResponse"
        404:
          description: "No such environment/account combo has read access"
components:
  schemas:
    DachaNATSRequest:
      type: object
      properties:
        featuresRequest:
          $ref: "#/components/schemas/DachaKeyDetailsRequest"
        permissionRequest:
          $ref: "#/components/schemas/DachaPermissionRequest"
    DachaNATSResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: integer
          format: int32
        featuresResponse:
          $ref: "#/components/schemas/DachaKeyDetailsResponse"
        permissionResponse:
          $ref: "#/components/schemas/DachaPermissionResponse"
    DachaKeyDetailsRequest:
      description: "Used when communication is via NATS for getApiKeyDetails request"
      required:
        - eId
        - serviceAccountKey
      properties:
        eId:
          type: string
          format: uuid
        serviceAccountKey:
          type: string
    DachaPermissionRequest:
      description: "Used for permission request when communication is via NATS from Edge for getApiKeyPermissions"
      allOf:
        - $ref: "#/components/schemas/DachaKeyDetailsRequest"
        - type: object
          required:
            - featureKey
            - eId
            - serviceAccountKey
          properties:
            featureKey:
              type: string
    CacheManagementMessage:
      x-package: io.featurehub.dacha.model
      required:
        - id
        - mit
        - requestType
        - cacheState
      properties:
        id:
          type: string
          format: uuid
        destId:
          description: "this allows one instance on the bus to communicate directly with another instance"
          type: string
          format: uuid
        requestType:
          $ref: "#/components/schemas/CacheRequestType"
        mit:
          description: "used only to negotiate master who is attempting to get data from MR"
          type: integer
          format: int64
        cacheState:
          $ref: "#/components/schemas/CacheState"
    CacheRequestType:
      x-package: io.featurehub.dacha.model
      type: string
      enum:
        - SEEKING_COMPLETE_CACHE
        - SEEKING_REFRESH
        - CLAIMING_MASTER
        - CACHE_REMOVED
        - CACHE_SOURCE
        - DUPLICATE_MIT
    CacheState:
      x-package: io.featurehub.dacha.model
      type: string
      enum:
        - NONE
        - REQUESTED
        - COMPLETE
    PublishAction:
      x-package: io.featurehub.dacha.model
      type: string
      description: "Indicates what type of update this is. If CREATE, it is a new record, if UPDATE it updates an existing one,
          if DELETE you should delete the record. If EMPTY then it indicates there are no records of this type and you shouldn't
          expect to see any further. EMPTY is used to indicate that the Master process is complete."
      enum:
        - CREATE
        - UPDATE
        - DELETE
        - EMPTY
    DachaStructureResponse:
      x-package: io.featurehub.dacha.model
      type: object
      required:
        - organizationId
        - portfolioId
        - applicationId
      properties:
        organizationId:
          x-basename: oId
          type: string
          format: uuid
        portfolioId:
          x-basename: pId
          type: string
          format: uuid
        applicationId:
          x-basename: aId
          type: string
          format: uuid
    PublishEnvironment:
      x-package: io.featurehub.dacha.model
      description: "Even a EMPTY message must set all the data to junk as it is an unusual situation"
      required:
        - action
        - featureValues
        - environment
        - serviceAccounts
        - organizationId
        - applicationId
        - portfolioId
        - count
      properties:
        environment:
          $ref: "#/components/schemas/CacheEnvironment"
        organizationId:
          x-basename: oId
          type: string
          format: uuid
        portfolioId:
          x-basename: pId
          type: string
          format: uuid
        applicationId:
          x-basename: aId
          type: string
          format: uuid
        featureValues:
          x-basename: fv
          type: array
          items:
            $ref: "#/components/schemas/CacheEnvironmentFeature"
        serviceAccounts:
          x-basename: sa
          type: array
          items:
            type: string
            format: UUID
        action:
          $ref: "#/components/schemas/PublishAction"
        count:
          x-basename: c
          type: integer
    CacheEnvironment:
      x-package: io.featurehub.dacha.model
      type: object
      required:
        - id
        - version
        - features
      properties:
        id:
          type: string
          format: uuid
        version:
          type: integer
          format: int64
        features:
          type: array
          items:
            $ref: "#/components/schemas/CacheFeature"
    CacheEnvironmentFeature:
      x-package: io.featurehub.dacha.model
      type: object
      description: "A feature and its possible value (which could be null)"
      required:
        - feature
      properties:
        feature:
          $ref: "#/components/schemas/CacheFeature"
        value:
          $ref: "#/components/schemas/CacheFeatureValue"
    CacheFeature:
      x-package: io.featurehub.dacha.model
      type: object
      required:
        - id
        - key
        - valueType
        - version
      properties:
        id:
          type: string
          format: uuid
        key:
          type: string
          description: "Unique within this application"
        valueType:
          $ref: "#/components/schemas/FeatureValueType"
        version:
          description: "used for optimistic locking when renaming a feature"
          type: integer
          format: int64
    CacheFeatureValue:
      x-package: io.featurehub.dacha.model
      required:
        - key
        - locked
        - id
        - version
      properties:
        id:
          type: string
          format: uuid
        key:
          type: string
        locked:
          type: boolean
        value:
          description: "default value if no strategy matches. interpreted by type in parent"
        rolloutStrategies:
          description: "These are custom rollout strategies that only apply to this feature value."
          type: array
          items:
            $ref: "#/components/schemas/CacheRolloutStrategy"
        version:
          description: "used for optimistic locking"
          type: integer
          format: int64
    PublishServiceAccount:
      x-package: io.featurehub.dacha.model
      required:
        - action
        - count
      properties:
        serviceAccount:
          $ref: "#/components/schemas/CacheServiceAccount"
        action:
          $ref: "#/components/schemas/PublishAction"
        count:
          type: integer
    CacheServiceAccount:
      x-package: io.featurehub.dacha.model
      type: object
      required:
        - id
        - version
        - apiKeyClientSide
        - apiKeyServerSide
        - permissions
      properties:
        id:
          type: string
          format: UUID
        version:
          type: integer
          format: int64
        apiKeyClientSide:
          type: string
          description: "this is a read only field, it denotes an api key where the eval is done client side"
          maxLength: 400
        apiKeyServerSide:
          type: string
          description: "this is a read only field, it denotes an api key where the eval is done server side"
          maxLength: 400
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/CacheServiceAccountPermission"
    CacheServiceAccountPermission:
      x-package: io.featurehub.dacha.model
      type: object
      required:
        - permissions
        - environmentId
      properties:
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/RoleType"
        environmentId:
          type: string
          format: uuid
    DachaPermissionResponse:
      x-package: io.featurehub.dacha.model
      type: object
      required:
        - roles
        - feature
      properties:
        organizationId:
          x-basename: oId
          type: string
          format: uuid
        portfolioId:
          x-basename: pId
          type: string
          format: uuid
        applicationId:
          x-basename: aId
          type: string
          format: uuid
        serviceKeyId:
          description: "The actual service key id rather than the key"
          x-basename: sId
          type: string
          format: uuid
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleType"
        feature:
          $ref: "#/components/schemas/CacheEnvironmentFeature"
    PublishFeatureValue:
      x-package: io.featurehub.dacha.model
      type: object
      description: "This is the item that gets published from MR originally"
      required:
        - action
        - environmentId
        - feature
      properties:
        action:
          $ref: "#/components/schemas/PublishAction"
        environmentId:
          description: "this needs to be passed because the feature value may be null"
          type: string
          format: uuid
        feature:
          $ref: "#/components/schemas/CacheEnvironmentFeature"
    DachaKeyDetailsResponse:
      x-package: io.featurehub.dacha.model
      properties:
        etag:
          x-basename: etag
          type: string
        organizationId:
          x-basename: oId
          type: string
          format: uuid
        portfolioId:
          x-basename: pId
          type: string
          format: uuid
        applicationId:
          x-basename: aId
          type: string
          format: uuid
        serviceKeyId:
          description: "The actual service key id rather than the key"
          x-basename: sId
          type: string
          format: uuid
        features:
          type: array
          items:
            $ref: "#/components/schemas/CacheEnvironmentFeature"
    CacheRolloutStrategy:
      x-package: io.featurehub.dacha.model
      description: "This is the model for the rollout strategy as required by Dacha and Edge"
      allOf:
        - $ref: "#/components/schemas/BaseRolloutStrategy"
        - type: object
          required:
            - id
            - attributes
          properties:
            attributes:
              type: array
              items:
                $ref: "#/components/schemas/CacheRolloutStrategyAttribute"
    CacheRolloutStrategyAttribute:
      x-package: io.featurehub.dacha.model
      allOf:
        - $ref: "#/components/schemas/BaseRolloutStrategyAttribute"
        - type: object
          required:
            - conditional
            - fieldName
            - type
