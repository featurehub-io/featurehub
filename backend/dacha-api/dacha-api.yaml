openapi: 3.0.1
info:
  title: Cache (Dache) API
  description: This is used by the Edge servers to access features and environments quickly.
  version: "1.1.1"
paths:
  /v2/environment/{eId}/{serviceAccountKey}:
    parameters:
      - name: eId
        description: "id of environment"
        in: path
        schema:
          type: string
          format: uuid
        required: true
      - name: serviceAccountKey
        description: "serviceAccountKey of service account"
        in: path
        schema:
          type: string
        required: true
      - name: excludeRetired
        description: "exclude retired features"
        in: query
        schema:
          type: boolean
        required: false
    get:
      operationId: getApiKeyDetails
      tags:
        - DachaApiKeyService
      responses:
        200:
          description: "All feature values for this environment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DachaKeyDetailsResponse"
        404:
          description: "No such environment/account combo has read access"
  /v2/environment/{eId}/{serviceAccountKey}/permissions/{featureKey}:
    parameters:
      - name: eId
        description: "id of environment"
        in: path
        schema:
          type: string
          format: uuid
      - name: serviceAccountKey
        description: "id of service account"
        in: path
        schema:
          type: string
      - name: featureKey
        in: path
        description: "The key that we want"
        schema:
          type: string
    get:
      operationId: getApiKeyPermissions
      tags:
        - DachaApiKeyService
      responses:
        200:
          description: "All permissions and feature values for this environment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DachaPermissionResponse"
        404:
          description: "No such environment/account combo has read access"
  /v2/environment/{eId}/structure:
    parameters:
      - name: eId
        description: "id of environment"
        in: path
        schema:
          type: string
          format: uuid
    get:
      operationId: getEnvironmentStructure
      tags:
        - DachaEnvironmentService
      responses:
        200:
          description: "The parent structure for this environment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DachaStructureResponse"
        404:
          description: "No such environment/account combo has read access"
components:
  schemas:
    DachaNATSRequest:
      type: object
      properties:
        featuresRequest:
          $ref: "#/components/schemas/DachaKeyDetailsRequest"
        permissionRequest:
          $ref: "#/components/schemas/DachaPermissionRequest"
    DachaNATSResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: integer
          format: int32
        featuresResponse:
          $ref: "#/components/schemas/DachaKeyDetailsResponse"
        permissionResponse:
          $ref: "#/components/schemas/DachaPermissionResponse"
    DachaKeyDetailsRequest:
      description: "Used when communication is via NATS for getApiKeyDetails request"
      required:
        - eId
        - serviceAccountKey
      properties:
        eId:
          type: string
          format: uuid
        serviceAccountKey:
          type: string
        excludeRetired:
          type: boolean
    DachaPermissionRequest:
      description: "Used for permission request when communication is via NATS from Edge for getApiKeyPermissions"
      allOf:
        - $ref: "#/components/schemas/DachaKeyDetailsRequest"
        - type: object
          required:
            - featureKey
            - eId
            - serviceAccountKey
          properties:
            featureKey:
              type: string
    CacheManagementMessage:
      x-package: io.featurehub.dacha.model
      required:
        - id
        - mit
        - requestType
        - cacheState
      properties:
        id:
          type: string
          format: uuid
        destId:
          description: "this allows one instance on the bus to communicate directly with another instance"
          type: string
          format: uuid
        requestType:
          $ref: "#/components/schemas/CacheRequestType"
        mit:
          description: "used only to negotiate master who is attempting to get data from MR"
          type: integer
          format: int64
        cacheState:
          $ref: "#/components/schemas/CacheState"
    CacheRequestType:
      x-package: io.featurehub.dacha.model
      type: string
      enum:
        - SEEKING_COMPLETE_CACHE
        - SEEKING_REFRESH
        - CLAIMING_MASTER
        - CACHE_REMOVED
        - CACHE_SOURCE
        - DUPLICATE_MIT
    CacheState:
      x-package: io.featurehub.dacha.model
      type: string
      enum:
        - NONE
        - REQUESTED
        - COMPLETE
    DachaStructureResponse:
      x-package: io.featurehub.dacha.model
      type: object
      required:
        - organizationId
        - portfolioId
        - applicationId
      properties:
        organizationId:
          x-basename: oId
          type: string
          format: uuid
        portfolioId:
          x-basename: pId
          type: string
          format: uuid
        applicationId:
          x-basename: aId
          type: string
          format: uuid
    DachaPermissionResponse:
      x-package: io.featurehub.dacha.model
      type: object
      required:
        - roles
        - feature
      properties:
        organizationId:
          x-basename: oId
          type: string
          format: uuid
        portfolioId:
          x-basename: pId
          type: string
          format: uuid
        applicationId:
          x-basename: aId
          type: string
          format: uuid
        serviceKeyId:
          description: "The actual service key id rather than the key"
          x-basename: sId
          type: string
          format: uuid
        environmentInfo:
          description: "Allows extensibility for the environment"
          x-basename: eInf
          additionalProperties:
            type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleType"
        feature:
          $ref: "#/components/schemas/CacheEnvironmentFeature"
    PublishFeatureValue:
      x-package: io.featurehub.dacha.model
      type: object
      description: "This is the item that gets published from MR originally"
      required:
        - action
        - environmentId
        - feature
      properties:
        action:
          $ref: "#/components/schemas/PublishAction"
        environmentId:
          description: "this needs to be passed because the feature value may be null"
          type: string
          format: uuid
        feature:
          $ref: "#/components/schemas/CacheEnvironmentFeature"
    DachaKeyDetailsResponse:
      x-package: io.featurehub.dacha.model
      properties:
        etag:
          x-basename: etag
          type: string
        organizationId:
          x-basename: oId
          type: string
          format: uuid
        portfolioId:
          x-basename: pId
          type: string
          format: uuid
        applicationId:
          x-basename: aId
          type: string
          format: uuid
        serviceKeyId:
          description: "The actual service key id rather than the key"
          x-basename: sId
          type: string
          format: uuid
        environmentInfo:
          description: "Allows extensibility for the environment"
          x-basename: eInf
          additionalProperties:
            type: string
        features:
          type: array
          items:
            $ref: "#/components/schemas/CacheEnvironmentFeature"

