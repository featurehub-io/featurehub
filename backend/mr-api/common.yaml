components:
  schemas:
    FeatureEnvironment:
      properties:
        environment:
          $ref: "#/components/schemas/Environment"
        roles:
          description: "the roles of this person in this environment"
          type: array
          items:
            $ref: "#/components/schemas/RoleType"
        featureValue:
          $ref: "#/components/schemas/FeatureValue"
        serviceAccounts:
          type: array
          items:
            $ref: "#/components/schemas/ServiceAccount"
    ApplicationFeatureValues:
      properties:
        applicationId:
          type: string
        features:
          type: array
          items:
            $ref: "#/components/schemas/Feature"
        environments:
          type: array
          items:
            $ref: "#/components/schemas/EnvironmentFeatureValues"
    EnvironmentFeatureValues:
      properties:
        environmentId:
          type: string
        environmentName:
          type: string
        priorEnvironmentId:
          type: string
        features:
          description: "the values of the features depending on access"
          type: array
          items:
            $ref: "#/components/schemas/FeatureValue"
        roles:
          description: "the roles of this person in this environment"
          type: array
          items:
            $ref: "#/components/schemas/RoleType"
    Feature:
      description: "exists simply to hold the name of the feature as it exists across all environments"
      required:
        - name
      properties:
        id:
          type: string
        key:
          type: string
          description: "Unique within this application"
        alias:
          type: string
          description: "use this in code, as then people cannot guess your new features from their names"
        link:
          type: string
        name:
          type: string
          description: "description if any"
        valueType:
          $ref: "#/components/schemas/FeatureValueType"
        version:
          description: "used for optimistic locking when renaming a feature"
          type: integer
          format: int64
        whenArchived:
          type: string
          format: date-time
        secret:
          type: boolean
          description: "should the config remain invisible to users without secret permission"
    FeatureValue:
      required:
        - key
        - locked
      properties:
        id:
          type: string
        key:
          type: string
        locked:
          type: boolean
        valueString:
          description: "default value if no strategy matches. interpreted by type in parent"
          type: string
        valueNumber:
          type: number
        valueBoolean:
          type: boolean
        valueJson:
          type: string
        rolloutStrategy:
          $ref: "#/components/schemas/FeatureEnabledStrategy"
        rolloutStrategyInstances:
          type: array
          items:
            $ref: "#/components/schemas/RolloutStrategyInstance"
        environmentId:
          type: string
        version:
          description: "used for optimistic locking"
          type: integer
          format: int64
        whoUpdated:
          $ref: "#/components/schemas/Person"
        whenUpdated:
          type: string
          format: date-time
        whatUpdated:
          type: string
    RolloutStrategyInstance:
      description: "if the feature in an environment is different from its default, this will be the reason for it"
      properties:
        valueString:
          description: "default value if no strategy matches. interpreted by type in parent"
          type: string
        valueNumber:
          type: number
        valueBoolean:
          type: boolean
        valueJson:
          type: string
        percentage:
          type: number
        attribute:
          type: array
          items:
            $ref: "#/components/schemas/RolloutStrategyAttribute"
    # e.g. (OR).(AND).(name='os', valueString='Android').(name='version', valueString='7+').(ENDAND).(AND).(name='os', valueString='ios').(name='version', valueString='9+').(ENDAND).(ENDOR)
    # ==> (os = Android && valueString = "7+") or (os = ios && valueString = "9+")
    # conditional and value in each case is optional but 1 must be specified
    RolloutStrategyAttribute:
      properties:
        conditional:
          $ref: "#/components/schemas/RolloutStrategyAttributeConditional"
        name:
          type: string
        valueString:
          type: string
        valueNumber:
          type: number
        valueJson:
          type: string
        valueBoolean:
          type: boolean
    RolloutStrategyAttributeConditional:
      type: string
      enum:
        - AND
        - OR
        - ENDOR
        - ENDAND
    FeatureEnabledStrategy:
      type: string
      enum:
        - ATTRIBUTE
        - PERCENTAGE
    Audit:
      properties:
        createdBy:
          allOf:
            - $ref: "#/components/schemas/Person"
        updatedBy:
          allOf:
            - $ref: "#/components/schemas/Person"
        whenCreated:
          type: string
          format: date-time
        whenUpdated:
          type: string
          format: date-time
    SortOrder:
      type: string
      enum:
        - ASC
        - DESC
    Portfolio:
      allOf:
        - $ref: "#/components/schemas/Audit"
        - type: object
          required:
            - name
            - description
          properties:
            id:
              type: string
            name:
              type: string
              minLength: 1
              maxLength: 200
            description:
              type: string
              maxLength: 400
            version:
              type: integer
              format: int64
            organizationId:
              type: string
            groups:
              type: array
              items:
                $ref: "#/components/schemas/Group"
            applications:
              type: array
              items:
                $ref: "#/components/schemas/Application"
            whenArchived:
              type: string
              format: date-time
    Application:
      allOf:
        - $ref: "#/components/schemas/Audit"
        - type: object
          required:
            - name
          properties:
            id:
              type: string
            name:
              type: string
              maxLength: 100
            description:
              type: string
              maxLength: 400
            portfolioId:
              type: string
            version:
              type: integer
              format: int64
            groups:
              type: array
              items:
                $ref: "#/components/schemas/Group"
            features:
              type: array
              items:
                $ref: "#/components/schemas/Feature"
            environments:
              type: array
              items:
                $ref: "#/components/schemas/Environment"
            whenArchived:
              type: string
              format: date-time

    Person:
      allOf:
        - $ref: "#/components/schemas/Audit"
        - type: object
          properties:
            id:
              allOf:
                - $ref: "#/components/schemas/PersonId"
            name:
              type: string
              minLength: 1
              maxLength: 150
            email:
              type: string
              format: email
              maxLength: 100
            other:
              type: string
            source:
              type: string
            version:
              type: integer
              format: int64
            passwordRequiresReset:
              type: boolean
            groups:
              type: array
              items:
                $ref: "#/components/schemas/Group"
            whenArchived:
              type: string
              format: date-time
            additional:
              type: array
              items:
                $ref: "#/components/schemas/PersonInfo"
    PersonInfo:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string
    PersonId:
      required:
        - id
      properties:
        id:
          type: string
    Environment:
      allOf:
        - $ref: "#/components/schemas/Audit"
        - type: object
          required:
            - name
          properties:
            id:
              type: string
            applicationId:
              type: string
            name:
              type: string
              minLength: 1
              maxLength: 150
            priorEnvironmentId:
              type: string
            version:
              type: integer
              format: int64
            description:
              type: string
              maxLength: 400
            production:
              description: "is this a production environment?"
              type: boolean
            groupRoles:
              type: array
              items:
                $ref: "#/components/schemas/EnvironmentGroupRole"
            features:
              type: array
              items:
                $ref: "#/components/schemas/Feature"
            serviceAccountPermission:
              type: array
              items:
                $ref: "#/components/schemas/ServiceAccountPermission"
            whenArchived:
              type: string
              format: date-time

    ServiceAccount:
      required:
        - name
      properties:
        id:
          type: string
        name:
          type: string
          minLength: 1
          maxLength: 40
        portfolioId:
          type: string
        description:
          type: string
          maxLength: 400
        version:
          type: integer
          format: int64
        apiKey:
          type: string
          description: "this is a read only field"
          maxLength: 400
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/ServiceAccountPermission"
        whenArchived:
          type: string
          format: date-time
    ServiceAccountPermission:
      required:
        - permissions
        - environmentId
      properties:
        id:
          type: string
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/RoleType"
        serviceAccount:
          description: "The service account associated with this permission. Only filled in when coming from Environment"
          $ref: "#/components/schemas/ServiceAccount"
        environmentId:
          type: string
        sdkUrl:
          description: "Optional if they have chosen includeSdkUrl"
          type: string
    Group:
      allOf:
        - $ref: "#/components/schemas/Audit"
        - type: object
          required:
            - name
          properties:
            id:
              type: string
            admin:
              description: "is this an admin group?"
              type: boolean
            portfolioId:
              type: string
            organizationId:
              description: "this will be the organisation this group belongs to at the top level, or if a portfolio group, the organisation of the portfolio"
              type: string
            version:
              type: integer
              format: int64
            name:
              type: string
              minLength: 1
              maxLength: 255
            members:
              type: array
              items:
                $ref: "#/components/schemas/Person"
            applicationRoles:
              type: array
              items:
                $ref: "#/components/schemas/ApplicationGroupRole"
            environmentRoles:
              type: array
              items:
                $ref: "#/components/schemas/EnvironmentGroupRole"
            whenArchived:
              type: string
              format: date-time
    ApplicationGroupRole:
      required:
        - applicationId
        - groupId
        - roles
      properties:
        applicationId:
          type: string
        groupId:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationRoleType"
    ApplicationRoleType:
      type: string
      enum:
        - FEATURE_EDIT
    EnvironmentGroupRole:
      required:
        - environmentId
        - groupId
        - roles
      properties:
        environmentId:
          type: string
        groupId:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleType"
    Organization:
      allOf:
        - $ref: "#/components/schemas/Audit"
        - type: object
          required:
            - name
          properties:
            id:
              type: string
            version:
              type: integer
              format: int64
            name:
              type: string
              minLength: 1
              maxLength: 255
            admin:
              type: boolean
            orgGroup:
              $ref: "#/components/schemas/Group"
            portfolios:
              type: array
              items:
                $ref: "#/components/schemas/Portfolio"
            whenArchived:
              type: string
              format: date-time
