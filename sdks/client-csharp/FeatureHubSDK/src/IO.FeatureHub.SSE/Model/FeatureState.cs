/* 
 * FeatureServiceApi
 *
 * This describes the API clients use for accessing features
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = IO.FeatureHub.SSE.Client.OpenAPIDateConverter;

namespace IO.FeatureHub.SSE.Model
{
    /// <summary>
    /// FeatureState
    /// </summary>
    [DataContract]
    public partial class FeatureState :  IEquatable<FeatureState>
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public FeatureValueType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureState" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="key">key.</param>
        /// <param name="l">Is this feature locked. Usually this doesn&#39;t matter because the value is the value, but for FeatureInterceptors it can matter..</param>
        /// <param name="version">The version of the feature, this allows features to change values and it means we don&#39;t trigger events.</param>
        /// <param name="type">type.</param>
        /// <param name="value">the current value.</param>
        /// <param name="environmentId">This field is filled in from the client side in the GET api as the GET api is able to request multiple environments. It is never passed from the server, as an array of feature states is wrapped in an environment..</param>
        /// <param name="strategies">strategies.</param>
        public FeatureState(string id = default(string), string key = default(string), bool l = default(bool), long version = default(long), FeatureValueType? type = default(FeatureValueType?), object value = default(object), string environmentId = default(string), List<RolloutStrategy> strategies = default(List<RolloutStrategy>))
        {
            this.Id = id;
            this.Key = key;
            this.L = l;
            this.Version = version;
            this.Type = type;
            this.Value = value;
            this.EnvironmentId = environmentId;
            this.Strategies = strategies;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Is this feature locked. Usually this doesn&#39;t matter because the value is the value, but for FeatureInterceptors it can matter.
        /// </summary>
        /// <value>Is this feature locked. Usually this doesn&#39;t matter because the value is the value, but for FeatureInterceptors it can matter.</value>
        [DataMember(Name="l", EmitDefaultValue=false)]
        public bool L { get; set; }

        /// <summary>
        /// The version of the feature, this allows features to change values and it means we don&#39;t trigger events
        /// </summary>
        /// <value>The version of the feature, this allows features to change values and it means we don&#39;t trigger events</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public long Version { get; set; }

        /// <summary>
        /// the current value
        /// </summary>
        /// <value>the current value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public object Value { get; set; }

        /// <summary>
        /// This field is filled in from the client side in the GET api as the GET api is able to request multiple environments. It is never passed from the server, as an array of feature states is wrapped in an environment.
        /// </summary>
        /// <value>This field is filled in from the client side in the GET api as the GET api is able to request multiple environments. It is never passed from the server, as an array of feature states is wrapped in an environment.</value>
        [DataMember(Name="environmentId", EmitDefaultValue=false)]
        public string EnvironmentId { get; set; }

        /// <summary>
        /// Gets or Sets Strategies
        /// </summary>
        [DataMember(Name="strategies", EmitDefaultValue=false)]
        public List<RolloutStrategy> Strategies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureState {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  L: ").Append(L).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  EnvironmentId: ").Append(EnvironmentId).Append("\n");
            sb.Append("  Strategies: ").Append(Strategies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureState);
        }

        /// <summary>
        /// Returns true if FeatureState instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.L == input.L ||
                    this.L.Equals(input.L)
                ) && 
                (
                    this.Version == input.Version ||
                    this.Version.Equals(input.Version)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.EnvironmentId == input.EnvironmentId ||
                    (this.EnvironmentId != null &&
                    this.EnvironmentId.Equals(input.EnvironmentId))
                ) && 
                (
                    this.Strategies == input.Strategies ||
                    this.Strategies != null &&
                    input.Strategies != null &&
                    this.Strategies.SequenceEqual(input.Strategies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                hashCode = hashCode * 59 + this.L.GetHashCode();
                hashCode = hashCode * 59 + this.Version.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.EnvironmentId != null)
                    hashCode = hashCode * 59 + this.EnvironmentId.GetHashCode();
                if (this.Strategies != null)
                    hashCode = hashCode * 59 + this.Strategies.GetHashCode();
                return hashCode;
            }
        }

    }

}
