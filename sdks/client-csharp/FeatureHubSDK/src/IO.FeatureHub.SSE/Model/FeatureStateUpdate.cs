/* 
 * FeatureServiceApi
 *
 * This describes the API clients use for accessing features
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = IO.FeatureHub.SSE.Client.OpenAPIDateConverter;

namespace IO.FeatureHub.SSE.Model
{
    /// <summary>
    /// FeatureStateUpdate
    /// </summary>
    [DataContract]
    public partial class FeatureStateUpdate :  IEquatable<FeatureStateUpdate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureStateUpdate" /> class.
        /// </summary>
        /// <param name="value">the new value.</param>
        /// <param name="updateValue">indicates whether you are trying to update the value, as value can be null.</param>
        /// <param name="_lock">set only if you wish to lock or unlock, otherwise null.</param>
        public FeatureStateUpdate(object value = default(object), bool updateValue = default(bool), bool _lock = default(bool))
        {
            this.Value = value;
            this.UpdateValue = updateValue;
            this.Lock = _lock;
        }
        
        /// <summary>
        /// the new value
        /// </summary>
        /// <value>the new value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public object Value { get; set; }

        /// <summary>
        /// indicates whether you are trying to update the value, as value can be null
        /// </summary>
        /// <value>indicates whether you are trying to update the value, as value can be null</value>
        [DataMember(Name="updateValue", EmitDefaultValue=false)]
        public bool UpdateValue { get; set; }

        /// <summary>
        /// set only if you wish to lock or unlock, otherwise null
        /// </summary>
        /// <value>set only if you wish to lock or unlock, otherwise null</value>
        [DataMember(Name="lock", EmitDefaultValue=false)]
        public bool Lock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureStateUpdate {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  UpdateValue: ").Append(UpdateValue).Append("\n");
            sb.Append("  Lock: ").Append(Lock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureStateUpdate);
        }

        /// <summary>
        /// Returns true if FeatureStateUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureStateUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureStateUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.UpdateValue == input.UpdateValue ||
                    this.UpdateValue.Equals(input.UpdateValue)
                ) && 
                (
                    this.Lock == input.Lock ||
                    this.Lock.Equals(input.Lock)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateValue.GetHashCode();
                hashCode = hashCode * 59 + this.Lock.GetHashCode();
                return hashCode;
            }
        }

    }

}
