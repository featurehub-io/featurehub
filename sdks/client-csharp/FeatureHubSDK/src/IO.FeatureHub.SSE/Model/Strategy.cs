/* 
 * FeatureServiceApi
 *
 * This describes the API clients use for accessing features
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = IO.FeatureHub.SSE.Client.OpenAPIDateConverter;

namespace IO.FeatureHub.SSE.Model
{
    /// <summary>
    /// Strategy
    /// </summary>
    [DataContract]
    public partial class Strategy :  IEquatable<Strategy>
    {
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public StrategyNameType Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Strategy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Strategy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Strategy" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="value">this value is used if it is a simple attribute or percentage. If it is more complex then the pairs are passed.</param>
        /// <param name="pairs">pairs.</param>
        public Strategy(StrategyNameType name = default(StrategyNameType), object value = default(object), List<StrategyPair> pairs = default(List<StrategyPair>))
        {
            this.Name = name;
            this.Value = value;
            this.Pairs = pairs;
        }
        
        /// <summary>
        /// this value is used if it is a simple attribute or percentage. If it is more complex then the pairs are passed
        /// </summary>
        /// <value>this value is used if it is a simple attribute or percentage. If it is more complex then the pairs are passed</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public object Value { get; set; }

        /// <summary>
        /// Gets or Sets Pairs
        /// </summary>
        [DataMember(Name="pairs", EmitDefaultValue=false)]
        public List<StrategyPair> Pairs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Strategy {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Pairs: ").Append(Pairs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Strategy);
        }

        /// <summary>
        /// Returns true if Strategy instances are equal
        /// </summary>
        /// <param name="input">Instance of Strategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Strategy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    this.Name.Equals(input.Name)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Pairs == input.Pairs ||
                    this.Pairs != null &&
                    input.Pairs != null &&
                    this.Pairs.SequenceEqual(input.Pairs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Pairs != null)
                    hashCode = hashCode * 59 + this.Pairs.GetHashCode();
                return hashCode;
            }
        }

    }

}
