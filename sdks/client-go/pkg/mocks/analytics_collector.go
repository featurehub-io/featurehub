// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/featurehub-io/featurehub/sdks/client-go/pkg/interfaces"
	"github.com/featurehub-io/featurehub/sdks/client-go/pkg/models"
)

type FakeAnalyticsCollector struct {
	LogEventStub        func(string, map[string]string, map[string]*models.FeatureState) error
	logEventMutex       sync.RWMutex
	logEventArgsForCall []struct {
		arg1 string
		arg2 map[string]string
		arg3 map[string]*models.FeatureState
	}
	logEventReturns struct {
		result1 error
	}
	logEventReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAnalyticsCollector) LogEvent(arg1 string, arg2 map[string]string, arg3 map[string]*models.FeatureState) error {
	fake.logEventMutex.Lock()
	ret, specificReturn := fake.logEventReturnsOnCall[len(fake.logEventArgsForCall)]
	fake.logEventArgsForCall = append(fake.logEventArgsForCall, struct {
		arg1 string
		arg2 map[string]string
		arg3 map[string]*models.FeatureState
	}{arg1, arg2, arg3})
	fake.recordInvocation("LogEvent", []interface{}{arg1, arg2, arg3})
	fake.logEventMutex.Unlock()
	if fake.LogEventStub != nil {
		return fake.LogEventStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.logEventReturns
	return fakeReturns.result1
}

func (fake *FakeAnalyticsCollector) LogEventCallCount() int {
	fake.logEventMutex.RLock()
	defer fake.logEventMutex.RUnlock()
	return len(fake.logEventArgsForCall)
}

func (fake *FakeAnalyticsCollector) LogEventCalls(stub func(string, map[string]string, map[string]*models.FeatureState) error) {
	fake.logEventMutex.Lock()
	defer fake.logEventMutex.Unlock()
	fake.LogEventStub = stub
}

func (fake *FakeAnalyticsCollector) LogEventArgsForCall(i int) (string, map[string]string, map[string]*models.FeatureState) {
	fake.logEventMutex.RLock()
	defer fake.logEventMutex.RUnlock()
	argsForCall := fake.logEventArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAnalyticsCollector) LogEventReturns(result1 error) {
	fake.logEventMutex.Lock()
	defer fake.logEventMutex.Unlock()
	fake.LogEventStub = nil
	fake.logEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAnalyticsCollector) LogEventReturnsOnCall(i int, result1 error) {
	fake.logEventMutex.Lock()
	defer fake.logEventMutex.Unlock()
	fake.LogEventStub = nil
	if fake.logEventReturnsOnCall == nil {
		fake.logEventReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.logEventReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAnalyticsCollector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.logEventMutex.RLock()
	defer fake.logEventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAnalyticsCollector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interfaces.AnalyticsCollector = new(FakeAnalyticsCollector)
